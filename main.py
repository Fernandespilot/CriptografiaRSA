"""
Script para executar todos os exemplos e testes
"""

import sys
import os

# Adicionar diret√≥rios ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'utils'))

def menu_principal():
    """Exibe o menu principal"""
    print("=" * 60)
    print("üîê SISTEMA DE CRIPTOGRAFIA RSA üîê")
    print("=" * 60)
    print("Escolha uma op√ß√£o:")
    print()
    print("1. üìö Executar RSA B√°sico (Implementa√ß√£o Educacional)")
    print("2. üîí Executar RSA Avan√ßado (Produ√ß√£o)")
    print("3. üí¨ Exemplo de Comunica√ß√£o Segura")
    print("4. üñ•Ô∏è  Interface Gr√°fica (GUI)")
    print("5. üìä Benchmark de Performance")
    print("6. üìã Relat√≥rio de Chaves")
    print("7. üß™ Executar Todos os Exemplos")
    print("8. üßπ Limpar Arquivos Tempor√°rios")
    print("9. üìñ Como Funciona o RSA (Explica√ß√£o)")
    print("10. üõ°Ô∏è An√°lise de Seguran√ßa e Tempo de Quebra")
    print("0. ‚ùå Sair")
    print()
    print("=" * 60)

def executar_rsa_basico():
    """Executa o exemplo RSA b√°sico"""
    print("\nüîç Executando RSA B√°sico...")
    try:
        from rsa_basico import main
        main()
    except Exception as e:
        print(f"Erro: {e}")

def executar_rsa_avancado():
    """Executa o exemplo RSA avan√ßado"""
    print("\nüîí Executando RSA Avan√ßado...")
    try:
        from rsa_avancado import main
        main()
    except Exception as e:
        print(f"Erro: {e}")

def executar_comunicacao():
    """Executa exemplo de comunica√ß√£o segura"""
    print("\nüí¨ Executando Comunica√ß√£o Segura...")
    try:
        from exemplos.comunicacao_segura import main
        main()
    except Exception as e:
        print(f"Erro: {e}")

def executar_gui():
    """Executa a interface gr√°fica"""
    print("\nüñ•Ô∏è Abrindo Interface Gr√°fica...")
    try:
        from rsa_gui import main
        main()
    except Exception as e:
        print(f"Erro: {e}")
        print("Certifique-se de que o tkinter est√° instalado!")

def executar_benchmark():
    """Executa benchmark de performance"""
    print("\nüìä Executando Benchmark...")
    try:
        from utils.rsa_utils import benchmark_rsa
        resultados = benchmark_rsa([1024, 2048])
        
        print("\nüìà RESUMO DO BENCHMARK:")
        print("-" * 40)
        for tamanho, tempos in resultados.items():
            print(f"Chave {tamanho} bits:")
            print(f"  Mais r√°pido: Verifica√ß√£o ({tempos['verificacao']:.4f}s)")
            print(f"  Mais lento: Gera√ß√£o ({tempos['geracao_chaves']:.3f}s)")
            print()
    except Exception as e:
        print(f"Erro: {e}")

def gerar_relatorio_chaves():
    """Gera relat√≥rio das chaves"""
    print("\nüìã Gerando Relat√≥rio de Chaves...")
    try:
        from rsa_avancado import RSAAvancado
        from utils.rsa_utils import gerar_relatorio_chaves
        
        rsa = RSAAvancado()
        print("Gerando chaves para o relat√≥rio...")
        rsa.gerar_chaves(2048)
        
        relatorio = gerar_relatorio_chaves(rsa)
        print("\n" + relatorio)
        
        # Salvar relat√≥rio
        with open("relatorio_chaves.txt", "w", encoding='utf-8') as f:
            f.write(relatorio)
        print("\nüíæ Relat√≥rio salvo em 'relatorio_chaves.txt'")
        
    except Exception as e:
        print(f"Erro: {e}")

def executar_todos():
    """Executa todos os exemplos"""
    print("\nüß™ Executando Todos os Exemplos...")
    print("=" * 50)
    
    exemplos = [
        ("RSA B√°sico", executar_rsa_basico),
        ("RSA Avan√ßado", executar_rsa_avancado),
        ("Comunica√ß√£o Segura", executar_comunicacao),
        ("Benchmark", executar_benchmark),
        ("Relat√≥rio", gerar_relatorio_chaves)
    ]
    
    for nome, funcao in exemplos:
        print(f"\n‚ñ∂Ô∏è Executando {nome}...")
        try:
            funcao()
            print(f"‚úÖ {nome} conclu√≠do!")
        except Exception as e:
            print(f"‚ùå Erro em {nome}: {e}")
        
        print("-" * 30)
    
    print("\nüéâ Todos os exemplos foram executados!")

def limpar_temporarios():
    """Limpa arquivos tempor√°rios"""
    print("\nüßπ Limpando Arquivos Tempor√°rios...")
    try:
        from utils.rsa_utils import limpar_arquivos_temporarios
        removidos = limpar_arquivos_temporarios()
        
        if removidos:
            print("Arquivos removidos:")
            for arquivo in removidos:
                print(f"  - {arquivo}")
        else:
            print("Nenhum arquivo tempor√°rio encontrado.")
    except Exception as e:
        print(f"Erro: {e}")

def explicar_rsa():
    """Explica como funciona o algoritmo RSA"""
    print("\nüìñ COMO FUNCIONA O ALGORITMO RSA")
    print("=" * 60)
    
    print("\nüßÆ FUNDAMENTOS MATEM√ÅTICOS:")
    print("-" * 30)
    print("O RSA baseia-se na dificuldade de fatorar n√∫meros muito grandes.")
    print("√â f√°cil multiplicar dois primos, mas dif√≠cil encontr√°-los conhecendo apenas o produto.")
    
    print("\nüîë GERA√á√ÉO DAS CHAVES:")
    print("-" * 25)
    print("1. Escolha dois n√∫meros primos grandes: p e q")
    print("2. Calcule n = p √ó q (m√≥dulo p√∫blico)")
    print("3. Calcule œÜ(n) = (p-1) √ó (q-1)")
    print("4. Escolha e (expoente p√∫blico, geralmente 65537)")
    print("5. Calcule d (expoente privado): d √ó e ‚â° 1 (mod œÜ(n))")
    print("\nResultado:")
    print("‚Ä¢ Chave P√∫blica: (e, n)")
    print("‚Ä¢ Chave Privada: (d, n)")
    
    print("\nüîê PROCESSO DE CRIPTOGRAFIA:")
    print("-" * 32)
    print("‚Ä¢ Para criptografar mensagem m: C = m^e mod n")
    print("‚Ä¢ Para descriptografar cifra C: m = C^d mod n")
    
    print("\n‚úçÔ∏è ASSINATURA DIGITAL:")
    print("-" * 24)
    print("‚Ä¢ Assinar: S = hash(mensagem)^d mod n")
    print("‚Ä¢ Verificar: hash(mensagem) = S^e mod n")
    
    print("\nüõ°Ô∏è POR QUE √â SEGURO:")
    print("-" * 20)
    print("‚Ä¢ A seguran√ßa depende da dificuldade de fatorar n")
    print("‚Ä¢ Conhecendo n, √© preciso encontrar p e q")
    print("‚Ä¢ Com p e q, pode-se calcular d (chave privada)")
    print("‚Ä¢ Para n√∫meros grandes, isso √© computacionalmente invi√°vel")

def mostrar_analise_seguranca():
    """Mostra an√°lise detalhada de seguran√ßa"""
    print("\nüõ°Ô∏è AN√ÅLISE DE SEGURAN√áA E TEMPO DE QUEBRA")
    print("=" * 60)
    
    print("\n‚è±Ô∏è TEMPO PARA QUEBRAR RSA (COMPUTADOR COMUM):")
    print("-" * 48)
    
    tamanhos = [
        ("512 bits", "INSEGURO", "~1 ano", "Quebrado em 1999"),
        ("1024 bits", "VULNER√ÅVEL", "~10.000 anos", "Evite usar"),
        ("2048 bits", "SEGURO", "~300 bilh√µes de anos", "Recomendado"),
        ("3072 bits", "MUITO SEGURO", "Mais que idade do universo", "Longo prazo"),
        ("4096 bits", "EXTREMAMENTE SEGURO", "Praticamente imposs√≠vel", "M√°xima seguran√ßa")
    ]
    
    for tamanho, status, tempo, observacao in tamanhos:
        print(f"‚Ä¢ {tamanho:12} | {status:18} | {tempo:25} | {observacao}")
    
    print("\nüñ•Ô∏è CEN√ÅRIOS DE ATAQUE:")
    print("-" * 25)
    print("‚Ä¢ Computador dom√©stico (Intel i7):")
    print("  - RSA-2048: ~10^15 anos (1 quatrilh√£o de anos)")
    print("‚Ä¢ Cluster de 1000 computadores:")
    print("  - RSA-2048: ~10^12 anos (1 trilh√£o de anos)")
    print("‚Ä¢ Supercomputador (ex: Fugaku):")
    print("  - RSA-2048: ~1 bilh√£o de anos")
    
    print("\n‚ö° CRESCIMENTO DA DIFICULDADE:")
    print("-" * 32)
    print("‚Ä¢ +1 bit na chave = dobra a dificuldade")
    print("‚Ä¢ +10 bits = 1024x mais dif√≠cil")
    print("‚Ä¢ +100 bits = 2^100 ‚âà 10^30 vezes mais dif√≠cil")
    
    print("\nü§ñ AMEA√áAS FUTURAS:")
    print("-" * 18)
    print("‚Ä¢ Computadores qu√¢nticos com Algoritmo de Shor")
    print("‚Ä¢ RSA-2048 seria quebrado em poucas horas")
    print("‚Ä¢ Por isso existe pesquisa em criptografia p√≥s-qu√¢ntica")
    
    print("\nüìä PARA COMPARA√á√ÉO:")
    print("-" * 18)
    print("‚Ä¢ Idade do universo: ~4.3 √ó 10^17 segundos")
    print("‚Ä¢ √Åtomos no universo: ~10^80")
    print("‚Ä¢ Tempo para quebrar RSA-2048: ~10^604 segundos")
    print("  (Incompreensivelmente maior que qualquer escala temporal!)")

def verificar_dependencias():
    """Verifica se as depend√™ncias est√£o instaladas"""
    print("üîç Verificando depend√™ncias...")
    
    dependencias = {
        'cryptography': 'Biblioteca principal de criptografia',
        'tkinter': 'Interface gr√°fica (geralmente inclu√≠do no Python)',
    }
    
    faltando = []
    
    for dep, desc in dependencias.items():
        try:
            if dep == 'tkinter':
                import tkinter
            else:
                __import__(dep)
            print(f"‚úÖ {dep}: OK")
        except ImportError:
            print(f"‚ùå {dep}: FALTANDO ({desc})")
            faltando.append(dep)
    
    if faltando:
        print(f"\n‚ö†Ô∏è Instale as depend√™ncias faltando:")
        print("pip install cryptography")
        return False
    
    print("\n‚úÖ Todas as depend√™ncias est√£o instaladas!")
    return True

def explicar_rsa():
    """Explica como funciona o algoritmo RSA"""
    print("\nüìñ COMO FUNCIONA O ALGORITMO RSA")
    print("=" * 60)
    
    print("\nüßÆ FUNDAMENTOS MATEM√ÅTICOS:")
    print("-" * 30)
    print("O RSA baseia-se na dificuldade de fatorar n√∫meros muito grandes.")
    print("√â f√°cil multiplicar dois primos, mas dif√≠cil encontr√°-los conhecendo apenas o produto.")
    
    print("\nüîë GERA√á√ÉO DAS CHAVES:")
    print("-" * 25)
    print("1. Escolha dois n√∫meros primos grandes: p e q")
    print("2. Calcule n = p √ó q (m√≥dulo p√∫blico)")
    print("3. Calcule œÜ(n) = (p-1) √ó (q-1)")
    print("4. Escolha e (expoente p√∫blico, geralmente 65537)")
    print("5. Calcule d (expoente privado): d √ó e ‚â° 1 (mod œÜ(n))")
    print("\nResultado:")
    print("‚Ä¢ Chave P√∫blica: (e, n)")
    print("‚Ä¢ Chave Privada: (d, n)")
    
    print("\nüîê PROCESSO DE CRIPTOGRAFIA:")
    print("-" * 32)
    print("‚Ä¢ Para criptografar mensagem m: C = m^e mod n")
    print("‚Ä¢ Para descriptografar cifra C: m = C^d mod n")
    
    print("\n‚úçÔ∏è ASSINATURA DIGITAL:")
    print("-" * 24)
    print("‚Ä¢ Assinar: S = hash(mensagem)^d mod n")
    print("‚Ä¢ Verificar: hash(mensagem) = S^e mod n")
    
    print("\nüõ°Ô∏è POR QUE √â SEGURO:")
    print("-" * 20)
    print("‚Ä¢ A seguran√ßa depende da dificuldade de fatorar n")
    print("‚Ä¢ Conhecendo n, √© preciso encontrar p e q")
    print("‚Ä¢ Com p e q, pode-se calcular d (chave privada)")
    print("‚Ä¢ Para n√∫meros grandes, isso √© computacionalmente invi√°vel")

def mostrar_analise_seguranca():
    """Mostra an√°lise detalhada de seguran√ßa"""
    print("\nüõ°Ô∏è AN√ÅLISE DE SEGURAN√áA E TEMPO DE QUEBRA")
    print("=" * 60)
    
    print("\n‚è±Ô∏è TEMPO PARA QUEBRAR RSA (COMPUTADOR COMUM):")
    print("-" * 48)
    
    tamanhos = [
        ("512 bits", "INSEGURO", "~1 ano", "Quebrado em 1999"),
        ("1024 bits", "VULNER√ÅVEL", "~10.000 anos", "Evite usar"),
        ("2048 bits", "SEGURO", "~300 bilh√µes de anos", "Recomendado"),
        ("3072 bits", "MUITO SEGURO", "Mais que idade do universo", "Longo prazo"),
        ("4096 bits", "EXTREMAMENTE SEGURO", "Praticamente imposs√≠vel", "M√°xima seguran√ßa")
    ]
    
    for tamanho, status, tempo, observacao in tamanhos:
        print(f"‚Ä¢ {tamanho:12} | {status:18} | {tempo:25} | {observacao}")
    
    print("\nüñ•Ô∏è CEN√ÅRIOS DE ATAQUE:")
    print("-" * 25)
    print("‚Ä¢ Computador dom√©stico (Intel i7):")
    print("  - RSA-2048: ~10^15 anos (1 quatrilh√£o de anos)")
    print("‚Ä¢ Cluster de 1000 computadores:")
    print("  - RSA-2048: ~10^12 anos (1 trilh√£o de anos)")
    print("‚Ä¢ Supercomputador (ex: Fugaku):")
    print("  - RSA-2048: ~1 bilh√£o de anos")
    
    print("\n‚ö° CRESCIMENTO DA DIFICULDADE:")
    print("-" * 32)
    print("‚Ä¢ +1 bit na chave = dobra a dificuldade")
    print("‚Ä¢ +10 bits = 1024x mais dif√≠cil")
    print("‚Ä¢ +100 bits = 2^100 ‚âà 10^30 vezes mais dif√≠cil")
    
    print("\nü§ñ AMEA√áAS FUTURAS:")
    print("-" * 18)
    print("‚Ä¢ Computadores qu√¢nticos com Algoritmo de Shor")
    print("‚Ä¢ RSA-2048 seria quebrado em poucas horas")
    print("‚Ä¢ Por isso existe pesquisa em criptografia p√≥s-qu√¢ntica")
    
    print("\nüìä PARA COMPARA√á√ÉO:")
    print("-" * 18)
    print("‚Ä¢ Idade do universo: ~4.3 √ó 10^17 segundos")
    print("‚Ä¢ √Åtomos no universo: ~10^80")
    print("‚Ä¢ Tempo para quebrar RSA-2048: ~10^604 segundos")
    print("  (Incompreensivelmente maior que qualquer escala temporal!)")

def main():
    """Fun√ß√£o principal"""
    # Verificar depend√™ncias primeiro
    if not verificar_dependencias():
        print("\n‚ùå Algumas depend√™ncias est√£o faltando.")
        print("Execute: pip install -r requirements.txt")
        return
    
    while True:
        menu_principal()
        
        try:
            opcao = input("Digite sua op√ß√£o: ").strip()
            
            if opcao == "0":
                print("\nüëã Obrigado por usar o Sistema RSA!")
                break
            elif opcao == "1":
                executar_rsa_basico()
            elif opcao == "2":
                executar_rsa_avancado()
            elif opcao == "3":
                executar_comunicacao()
            elif opcao == "4":
                executar_gui()
            elif opcao == "5":
                executar_benchmark()
            elif opcao == "6":
                gerar_relatorio_chaves()
            elif opcao == "7":
                executar_todos()
            elif opcao == "8":
                limpar_temporarios()
                
            elif opcao == "9":
                explicar_rsa()            
            elif opcao == "10":
                mostrar_analise_seguranca()
            else:
                print("\n‚ùå Op√ß√£o inv√°lida! Tente novamente.")
            
            if opcao != "0":
                input("\n‚è∏Ô∏è Pressione Enter para continuar...")
                
        except KeyboardInterrupt:
            print("\n\nüëã Programa interrompido pelo usu√°rio.")
            break
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {e}")
            input("\n‚è∏Ô∏è Pressione Enter para continuar...")

if __name__ == "__main__":
    main()
